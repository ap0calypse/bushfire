#!/usr/bin/perl
use strict;
use Curses;
use Time::HiRes qw(usleep);


# name:     bushfire
# author:   Manuel Fill (ap0calypse@agitatio.org)
# license:  if not specified, it's under GPL

my $area;

print "Welcome to bushfire!\n" .
      "The program needs some information now:\n\n";

print "How long should the area be? (leave blank for maximum): ";
chomp(my $length = <STDIN>);
print "How high should the area be? (leave blank for maximum): ";
chomp(my $height = <STDIN>);
print "Percentage for starting a fire (leave blank for default; default is 5): ";
chomp(my $percentage = <STDIN>);
print "Cycles between plants grow (leave blank for default; default is 250): ";
chomp(my $growth = <STDIN>);
print "Cycles between plants die (leave blank for default; default is 900): ";
chomp(my $death = <STDIN>);
print "Microseconds between screen refreshs (leave blank for default; default is 100000): ";
chomp(my $microsecs = <STDIN>);

my $max_veg = 3;
$microsecs = 100000 if $microsecs !~ m/\d+/;
$death = 900 if $death !~ m/\d+/;
$growth = 250 if $growth !~ m/\d+/;
$percentage = 5 if $percentage !~ m/\d+/;

initscr;
if($length eq "" || $length > $COLS - 2) { $length = $COLS - 2; }
if($height eq "" || $height > $LINES - 3) { $height = $LINES - 3; }

for my $x (1 .. $length) {
    for my $y (1 .. $height) {
        $area->{"$x:$y"} = int rand($max_veg) + 1;
    }
}

my ($f, $f_b, $f_0, $f_1, $f_2, $f_3) = (0,0,0,0,0,0);
my ($win, $coords, $cycle, $info);
sub print_area {
    $cycle = shift;
    clear;
    noecho;

    start_color;
    init_pair(1, 1, 0); # ACTIVE FIRE
    init_pair(2, 0, 0); # BURNT FIELD
    init_pair(3, 2, 0); # GRASS
    init_pair(4, 2, 0); # SHRUBS
    init_pair(5, 2, 0); # TREES
    $win = newwin($height + 2, $length + 2, 0, 0);
    box($win,0,0);
    my ($x, $y);
    for $coords (keys %{$area}) {
        $f++;
         if ($area->{$coords} == 0) { # burning field
            $f_0++;
            &draw_field(1,'W',$coords);
         }
         elsif ($area->{$coords} < 0) { # empty, burned field 
            $f_b++;
            &draw_field(2,'',$coords);
         }
         elsif ($area->{$coords} == 1) { # small vegetation very likely to burn -> grass
            $f_1++;
            &draw_field(3,'*',$coords);
         }
         elsif ($area->{$coords} == 2 ) { # normal vegetation -> shrubs
            $f_2++;
            &draw_field(4,'#',$coords);
         }
         else { # heavy rainforest, very unlikely to burn -> trees
            $f_3++;
            &draw_field(5,'@',$coords);
         }
    }
    if ((($cycle % $growth) <= 5 || ($cycle % $growth) >= ($growth - 5)) && $cycle > 10) {
        $info = newwin(3, 14, int $height/2, ($length/2) - 10);
        box($info, 0,0);
        addstr($info, 1,1, "plants grow!");
    }
    elsif ((($cycle % $death) <= 5 || ($cycle % $death) >= ($death - 5)) && $cycle > 10) {
        $info = newwin(3, 13, int $height/2, ($length/2) - 10);
        box($info,0,0);
        addstr($info, 1,1, "plants die!");
    }
    ($x,$y) = (undef, undef);
    attron(COLOR_PAIR(1));
    addstr($win, 0,2 , "| cycle: $cycle | fields: $f | burning: $f_0 | " .
                       "burnt: $f_b |");
    addstr($win, $height+1,2,"| grass (*): $f_1 | shrubs (#): $f_2 | trees (\@): $f_3 |");
    attroff(COLOR_PAIR(1));
    refresh($win);
    refresh($info) if $info;
    doupdate;
    delwin($win);
    delwin($info) if $info;
    $info = undef;
    ($f, $f_b, $f_0, $f_1, $f_2, $f_3) = (0,0,0,0,0,0);
}

sub draw_field {
    attron($win,COLOR_PAIR($_[0]));
    my ($x, $y) = split /:/, $_[2];
    addstr($win, $y, $x, $_[1]);
    attroff($win,COLOR_PAIR($_[0]));
}

my @burnables;
sub start_fire {
    for (keys %{$area}) {
        if ($area->{$_} == 1) {
            push @burnables, $_;
        }
    }
    my $random = rand scalar @burnables;
    $area->{$burnables[$random]}-- if defined $area->{$burnables[$random]};
    @burnables = undef;
}

my $cy = 0;
my (%decrement, $xy, $X, $Y, $x, $y, $l_x, $u_x, $l_y, $u_y);
while (1) {
    $cy++;
    &print_area($cy);
    if (int rand(100) < $percentage) { 
        &start_fire;
    }
    for $xy (keys %{$area}) {
        if ($area->{$xy} == 0) {
            ($x, $y) = split /:/, $xy;
            ($l_x, $u_x, $l_y, $u_y) = ($x-1,$x+1,$y-1,$y+1);
            $area->{"$x:$y"}-- if defined $area->{"$x:$y"};
            for $X ($l_x .. $u_x) {
                for $Y ($l_y .. $u_y) {
                    $decrement{"$X:$Y"} += 1 if defined $area->{"$X:$Y"} and ("$X:$Y" ne "$x:$y");
                }
            }
            ($X,$Y) = (undef,undef);
        }
        if (($cy % $growth) == 0) { # plants grow, ...
            $area->{$xy} += (int rand(2)) if $area->{$xy} > 0 && $area->{$xy} < $max_veg;
            $area->{$xy} = (int rand(2)) + 1 if $area->{$xy} < 0;
        }
        if (($cy % $death) == 0) { # ... and die
            $area->{$xy} -= (int rand(2)) if $area->{$xy} >= $max_veg;
            $area->{$xy} -= (int rand(2)) if $area->{$xy} == 2;
        }
    }
    for (keys %decrement) { # burn it down
        if ($area->{$_} == 3 && $decrement{$_} >= 4) {  # trees should be not that easy to burn down
            $area->{$_} = 0;
        }
        elsif ($area->{$_} == 2 && $decrement{$_} >= 2) {
            $area->{$_} = 0;
        }
        elsif ($area->{$_} == 1 && $decrement{$_} >= 1) {
            $area->{$_} = 0;
        }
    }
    %decrement = ();
    usleep($microsecs);
    ($xy, $x, $y, $X, $Y, $l_x, $u_x, $l_y, $u_y) = 
    (undef, undef, undef, undef, undef, undef, undef, undef, undef);
}
